<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>深入理解零拷贝技术</title>
    <link href="/2021/09/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/"/>
    <url>/2021/09/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>零拷贝技术是指计算机执行操作时，CPU不需要先将数据从某处内存复制到另一个特定区域。这种技术通常用于通过网络传输文件时节省CPU周期和内存带宽。</p></blockquote><p>原始的网络请求，需要数次在用户态和内核态之间切换以及数据的拷贝，这无疑大大影响了处理的效率，零拷贝技术就是为解决这一问题而诞生的。</p><p>我们常见的高性能组件（Netty、Kafka等），其内部基本都应用了零拷贝，在学习这些组件之前，有必要先了解什么是零拷贝。</p><h2 id="传统文件传输-read-write"><a href="#传统文件传输-read-write" class="headerlink" title="传统文件传输 read + write"></a>传统文件传输 read + write</h2><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210831202854577-402623906.png"></p><blockquote><p>DMA拷贝：指外部设备不通过CPU而直接与系统内存交换数据的接口技术</p></blockquote><p>如上图所示，传统的网络传输，需要进行<strong>4次用户态和内核态切换，4次数据拷贝（2次CPU拷贝，2次DMA拷贝）</strong></p><p>上下文的切换涉及到操作系统，相对CPU速度是非常耗时的，而且仅仅一次文件传输，竟然需要4次数据拷贝，造成CPU资源极大的浪费</p><p>不难看出，传统网络传输涉及很多冗余且无意义的操作，导致应用在高并发情况下，性能指数级下降，表现异常糟糕</p><p>为了解决这一问题，零拷贝技术诞生了，他其实是一个抽象的概念，但其本质就是通过减少上下文切换和数据拷贝次数来实现的</p><h2 id="mmap-write"><a href="#mmap-write" class="headerlink" title="mmap + write"></a>mmap + write</h2><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210831205815808-256098570.png"></p><p>如上图所示，mmap技术传输文件，需要进行<strong>4次用户态和内核态切换，3次数据拷贝（1次CPU拷贝、两次DMA拷贝）</strong></p><p>相对于传统数据传输，mmap减少了一次CPU拷贝，其具体过程如下：</p><ol><li>应用进程调用 mmap() ，DMA 会把磁盘的数据拷贝到内核的缓冲区里，应用进程跟操作系统内核「共享」这个缓冲区</li><li>应用进程再调用 write()，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据</li><li>最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的</li></ol><p>显然仅仅减少一次数据拷贝，依然难以满足要求</p><h2 id="sendfile"><a href="#sendfile" class="headerlink" title="sendfile"></a>sendfile</h2><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210831210555294-1735071566.png"></p><p>如上图所属，sendfile技术传输文件，需要进行<strong>2次用户态和内核态的切换，3次数据拷贝（1次CPU拷贝、两次DMA拷贝）</strong></p><p>相对于mmap，其又减少了两次上下文的切换，具体过程如下：</p><ol><li>应用调用sendfile接口，传入文件描述符，应用程序切换至内核态，并通过 DMA 将磁盘上的数据拷贝到内核缓冲区中</li><li>CPU将缓冲区数据拷贝至Socket缓冲区</li><li>DMA将数据拷贝到网卡的缓冲区里，应用程序切换至用户态</li></ol><p>sendfile其实是将原来的两步读写操作进行了合并，从而减少了2次上下文的切换，但其仍然不是真正意义上的“零”拷贝</p><h2 id="sendfile-SG-DMA"><a href="#sendfile-SG-DMA" class="headerlink" title="sendfile + SG-DMA"></a>sendfile + SG-DMA</h2><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210831211840050-1593959584.png"></p><p>从 Linux 内核 <code>2.4</code> 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， <code>sendfile()</code> 系统调用的过程发生了点变化，如上图所示，sendfile + SG-DMA技术传输文件，需要进行<strong>2次用户态和内核态的切换，2次数据拷贝（1次DMA拷贝，1次SG-DMA拷贝）</strong></p><p>具体过程如下：</p><ol><li>通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；</li><li>缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；</li></ol><p>此种方式对比之前的，真正意义上去除了CPU拷贝，CPU 的高速缓存再不会被污染了，CPU 可以去执行其他的业务计算任务，同时和 DMA 的 I/O 任务并行，极大地提升系统性能。</p><p>但他的劣势也很明显，强依赖于硬件的支持</p><h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><p>Linux 在 2.6.17 版本引入 splice 系统调用，不再需要硬件支持，同时还实现了两个文件描述符之间的数据零拷贝。</p><p>splice 系统调用可以在内核空间的读缓冲区（read buffer）和网络缓冲区（socket buffer）之间建立管道（pipeline），从而避免了用户缓冲区和Socket缓冲区的 CPU 拷贝操作。</p><p>基于 splice 系统调用的零拷贝方式，整个拷贝过程会发生 <strong>2次用户态和内核态的切换，2次数据拷贝（2次DMA拷贝）</strong>，具体过程如下：</p><ol><li>用户进程通过 splice() 函数向内核（kernel）发起系统调用，上下文从用户态（user space）切换为内核态（kernel space）。</li><li>CPU 利用 DMA 控制器将数据从主存或硬盘拷贝到内核空间（kernel space）的读缓冲区（read buffer）。</li><li>CPU 在内核空间的读缓冲区（read buffer）和网络缓冲区（socket buffer）之间建立管道（pipeline）。</li><li>CPU 利用 DMA 控制器将数据从网络缓冲区（socket buffer）拷贝到网卡进行数据传输。</li><li>上下文从内核态（kernel space）切换回用户态（user space），splice 系统调用执行返回。</li></ol><p>splice 拷贝方式也同样存在用户程序不能对数据进行修改的问题。除此之外，它使用了 Linux 的管道缓冲机制，可以用于任意两个文件描述符中传输数据，但是它的两个文件描述符参数中有一个必须是管道设备</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>本文简单介绍了 Linux 中的几种 Zero-copy 技术，随着技术的不断发展，又出现了诸如：写时复制、共享缓冲等技术，本文就不再赘述。</p><p>广义的来讲，Linux 的 Zero-copy 技术可以归纳成以下三大类：</p><ul><li><strong>减少甚至避免用户空间和内核空间之间的数据拷贝</strong>：在一些场景下，用户进程在数据传输过程中并不需要对数据进行访问和处理，那么数据在 Linux 的 <code>Page Cache</code> 和用户进程的缓冲区之间的传输就完全可以避免，让数据拷贝完全在内核里进行，甚至可以通过更巧妙的方式避免在内核里的数据拷贝。这一类实现一般是是通过增加新的系统调用来完成的，比如 Linux 中的 mmap()，sendfile() 以及 splice() 等。</li><li><strong>绕过内核的直接 I/O</strong>：允许在用户态进程绕过内核直接和硬件进行数据传输，内核在传输过程中只负责一些管理和辅助的工作。这种方式其实和第一种有点类似，也是试图避免用户空间和内核空间之间的数据传输，只是第一种方式是把数据传输过程放在内核态完成，而这种方式则是直接绕过内核和硬件通信，效果类似但原理完全不同。</li><li><strong>内核缓冲区和用户缓冲区之间的传输优化</strong>：这种方式侧重于在用户进程的缓冲区和操作系统的页缓存之间的 CPU 拷贝的优化。这种方法延续了以往那种传统的通信方式，但更灵活。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IO</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础（一）：I/O多路复用模型及Linux中的应用</title>
    <link href="/2021/09/07/Java%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AI-O%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E6%A8%A1%E5%9E%8B%E5%8F%8ALinux%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2021/09/07/Java%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AI-O%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E6%A8%A1%E5%9E%8B%E5%8F%8ALinux%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>IO多路复用模型广泛的应用于各种高并发的中间件中，那么区别于其他模式他的优势是什么、其核心设计思想又是什么、其在Linux中是如何实现的？</p></blockquote><h2 id="I-O模型"><a href="#I-O模型" class="headerlink" title="I/O模型"></a>I/O模型</h2><p>I/O模型主要有以下五种：</p><ol><li>同步阻塞I/O：I/O操作将同步阻塞用户线程</li><li>同步非阻塞I/O：所有操作都会立即返回，但需要不断轮询获取I/O结果</li><li>I/O多路复用：一个线程监听多个I/O操作是否就绪，依然是阻塞I/O，需要不断去轮询是否有就绪的fd</li><li>信号驱动I/O：当I/O就绪后，操作系统发送SIGIO信号通知对应进程，避免空轮询导致占用CPU（linux中的信号驱动本质还是使用的epoll）</li><li>异步I/O：应用告知内核启动某个操作，并让内核在整个操作完成之后，通知应用，这种模型与信号驱动模型的主要区别在于，信号驱动IO只是由内核通知我们可以开始下一个IO操作，而异步IO模型是由内核通知我们操作什么时候完成</li></ol><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210806141039296-263027358.png"></p><blockquote><p><a href="https://www.jianshu.com/p/486b0965c296">聊聊Linux 五种IO模型</a></p></blockquote><p>其中应用最广的当属I/O多路复用模型，其核心就是基于Reactor设计模式，仅一个线程就可以监听多个I/O事件，使得在高并发场景下节约大量线程资源</p><h2 id="Reactor设计模式"><a href="#Reactor设计模式" class="headerlink" title="Reactor设计模式"></a>Reactor设计模式</h2><p>处理WEB通常有两种请求模型：</p><ol><li>基于线程：每个请求都创建一个线程来处理。并发越高，线程数越多，内存占用越高，性能也会越低，线程上下文切换造成性能损耗，线程等待IO也会浪费CPU时间。一般应用于并发量少的小型应用。</li><li>事件驱动：每个请求都由Reactor线程监听，当I/O就绪后，由Reactor将任务分发给对用的Handler。</li></ol><p>显然事件驱动模型更适用于目前动辄几十万并发的场景。</p><p>网络服务器的基本处理模型如下：建立连接-&gt;读取请求-&gt;解析请求-&gt;处理服务-&gt;编码结果-&gt;返回结果。</p><p>基于网络服务器的基本模型，Reactor衍生出了以下三种模型。</p><p><strong>1.单线程模型</strong></p><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210806145615573-1068551815.png"></p><p>Reactor单线程模型，指的是所有的I/O操作都在同一个NIO线程上面完成，NIO线程的职责如下：</p><ul><li>作为NIO服务端，接收客户端的TCP连接</li><li>作为NIO客户端，向服务端发起TCP连接</li><li>读取通信对端的请求或者应答消息</li><li>向通信对端发送消息请求或者应答消息</li></ul><p>Reactor线程负责多路分离套接字，Accept新连接，并分派请求到处理器链中。该模型 适用于处理器链中业务处理组件能快速完成的场景。不过，这种单线程模型不能充分利用多核资源，所以实际使用的不多。</p><p><strong>2.多线程模型</strong></p><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210806150000856-388343563.png"></p><p>Reactor多线程模型与单线程模型最大区别就是引入了线程池，负责异步调用Handler处理业务，从而使其不会阻塞Reactor，它的流程如下：</p><ol><li>Reactor 对象通过 select 监控客户端请求事件，收到事件后，通过 dispatch 进行分发</li><li>如果是建立连接请求，则由 Acceptor 通过 accept 处理连接请求，然后创建一个 Handler 对象处理完成连接后的各种事件</li><li>如果不是连接请求，则由 Reactor 对象会分发调用连接对应的 Handler 来处理</li><li>Handler 只负责响应事件，不做具体的业务处理，通过 read 读取数据后，会分发给后面的 Worker 线程池的某个线程处理业务</li><li>Worker 线程池会分配独立线程完成真正的业务，并将结果返回给 Handler</li><li>Handler 收到响应后，通过 send 将结果返回给 Client</li></ol><p><strong>3.主从多线程模型</strong></p><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210806150127457-1350338900.png"></p><p>将连接请求句柄和数据传输句柄分开处理，使用单独的Reactor来处理连接请求句柄，提高数据传送句柄的处理能力。</p><p>服务端用于接收客户端连接的不再是1个单独的NIO线程，而是一个独立的NIO线程池。Acceptor接收到客户端TCP连接请求处理完成后（可能包含接入认证等），将新创建的SocketChannel注册到I/O线程池（sub reactor线程池）的某个I/O线程上，由它负责SocketChannel的读写和编解码工作。</p><p>著名的Netty即采用了此种模式</p><h2 id="Linux中的I-O多路复用"><a href="#Linux中的I-O多路复用" class="headerlink" title="Linux中的I/O多路复用"></a>Linux中的I/O多路复用</h2><p>linux实现I/O多路复用，主要涉及三个函数select、poll、epoll，目前前两个已经基本不用了，但作为面试必考点还是应该知晓其原理。</p><p>几个重要概念：</p><ol><li>用户空间和内核空间：为保护linux系统，将可能导致系统崩溃的指令定义为R0级别，仅允许在内核空间的进程使用，而普通应用则运行在用户空间，当应用需要执行R0级别指令时需要由用户态切换到内核态（极其耗时）。</li><li>文件描述符(File descriptor)：当应用程序请求内核打开/新建一个文件时，内核会返回一个文件描述符用于对应这个打开/新建的文件，其fd本质上就是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。</li></ol><p><strong>select</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">int select(int maxfd1,<span class="hljs-comment">// 最大文件描述符个数,传输的时候需要+1</span><br>   fd_set *readset,<span class="hljs-comment">// 读描述符集合</span><br>   fd_set *writeset,<span class="hljs-comment">// 写描述符集合</span><br>   fd_set *exceptset,<span class="hljs-comment">// 异常描述符集合</span><br>   <span class="hljs-keyword">const</span> struct timeval *timeout);<span class="hljs-comment">// 超时时间</span><br></code></pre></td></tr></table></figure><p>select通过数组存储用户关心的fd并通知内核，内核将fd集合拷贝至内核空间，遍历后将就绪的fd集合返回</p><p>其缺点主要有以下几点：</p><ol><li>最大支持的fd_size为1024（有争议？），远远不足以支撑高并发场景</li><li>每次涉及fd集合用户态到内核态切换，开销巨大</li><li>遍历fd的时间复杂度为O(n)，性能并不好</li></ol><p><strong>poll</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">int poll(struct pollfd *fds,         <span class="hljs-comment">// fd的文件集合改成自定义结构体,不再是数组的方式,不受限于FD_SIZE</span><br> unsigned long nfds,     <span class="hljs-comment">// 最大描述符个数</span><br>int timeout);<span class="hljs-comment">// 超时时间</span><br><br>struct pollfd &#123;<br>int fd;<span class="hljs-comment">// fd索引值</span><br>short events;<span class="hljs-comment">// 输入事件</span><br>short revents;<span class="hljs-comment">// 结果输出事件</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>poll技术与select技术实现逻辑基本一致,重要区别在于其使用链表的方式存储描述符fd,不受数组大小影响</p><p>说白了对于select的缺点poll只解决了第一点，依然存在很大性能问题</p><p><strong>epoll</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建保存epoll文件描述符的空间,该空间也称为“epoll例程”</span><br>int epoll_create(int size);    <span class="hljs-comment">// 使用链表,现在已经弃用</span><br>int epoll_create(int flag);    <span class="hljs-comment">// 使用红黑树的数据结构</span><br><br><span class="hljs-comment">// epoll注册/修改/删除 fd的操作</span><br>long epoll_ctl(int epfd,                        <span class="hljs-comment">// 上述epoll空间的fd索引值</span><br>               int op,                         <span class="hljs-comment">// 操作识别，EPOLL_CTL_ADD |  EPOLL_CTL_MOD  |  EPOLL_CTL_DEL</span><br>               int fd,                          <span class="hljs-comment">// 注册的fd</span><br>               struct epoll_event *event);      <span class="hljs-comment">// epoll监听事件的变化</span><br>struct epoll_event &#123;<br>__poll_t events;<br>__u64 data;<br>&#125; EPOLL_PACKED;<br><br><span class="hljs-comment">// epoll等待，与select/poll的逻辑一致</span><br>epoll_wait(int epfd,                            <span class="hljs-comment">// epoll空间</span><br>           struct epoll_event *events,           <span class="hljs-comment">// epoll监听事件的变化</span><br>           int maxevents,                        <span class="hljs-comment">// epoll可以保存的最大事件数</span><br>        int timeout);                         <span class="hljs-comment">// 超时时间</span><br></code></pre></td></tr></table></figure><p>为了解决select&amp;poll技术存在的两个性能问题，epoll应运而生</p><ol><li>通过epoll_create函数创建epoll空间(相当于一个容器管理)，在内核中存储需要监听的数据集合，通过红黑树实现，插入删除的时间复杂度为O(nlogn)</li><li>通过epoll_ctl函数来注册对socket事件的增删改操作，并且在内核底层通过利用mmap技术保证用户空间与内核空间对该内存是具备可见性，直接通过指针引用的方式进行操作，避免了大内存数据的拷贝导致的空间切换性能问题</li><li>通过ep_poll_callback回调函数，将就绪的fd插入双向链表fd中，避免通过轮询的方式获取，事件复杂度为O(1)</li><li>通过epoll_wait函数的方式阻塞获取rdlist中就绪的fd</li></ol><p>EPOLL事件有两种模型 Level Triggered (LT) 和 Edge Triggered (ET)：</p><ol><li>LT(level triggered，水平触发模式)是缺省的工作方式，并且同时支持 block 和 non-block socket。在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。如果你不作任何操作，内核还是会继续通知你的，所以，这种模式编程出错误可能性要小一点。</li><li>ET(edge-triggered，边缘触发模式)是高速工作方式，只支持no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，等到下次有新的数据进来的时候才会再次出发就绪事件。</li></ol><blockquote><p>Don’t let emotion cloud your judgment.<br>不要让情绪影响你的判断。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>IO</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty入门（三）：EventLoop</title>
    <link href="/2021/09/06/Netty%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AEventLoop/"/>
    <url>/2021/09/06/Netty%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AEventLoop/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Netty系列索引：</p><p><a href="https://www.cnblogs.com/hystrix/p/15103649.html">1.Netty入门（一）：ByteBuf</a></p><p><a href="https://www.cnblogs.com/hystrix/p/15105300.html">2.Netty入门（二）：Channel</a></p><p>IO相关：</p><p><a href="https://www.cnblogs.com/hystrix/p/15109264.html">1.Java基础（一）：I/O多路复用模型及Linux中的应用</a></p></blockquote><p>上文提到，早期基于线程的网络模型，处理高并发的能力非常差，随着请求数量的增多，必须不断新建线程，随之带来的问题就是服务器资源被占满、上下文切换成本过高以及IO阻塞导致的CPU浪费。</p><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210810143654715-766160099.png"></p><p>而Netty则使用了经典Reactor模型，并重新进行了封装，包括EventLoop、EventGroup等。</p><h2 id="EventLoopGroup"><a href="#EventLoopGroup" class="headerlink" title="EventLoopGroup"></a>EventLoopGroup</h2><p>EventLoopGroup是一个接口，继承自线程池EventExecutorGroup，并允许注册channel到自身所持有的EventLoop，同时支持按一定规则获取下一个EventLoop。</p><p>EventLoopGroup的具体实现有很多，下面以DefaultEventLoopGroup为例，简述一下我的理解</p><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210810155508901-288031159.png"></p><h3 id="1-ScheduledExecutorService"><a href="#1-ScheduledExecutorService" class="headerlink" title="1.ScheduledExecutorService"></a>1.ScheduledExecutorService</h3><p>JDK接口，一个延迟或定时任务的执行器，其实现类ScheduledThreadPoolExecutor主要是利用了延时队列及设置下次执行时间来实现的，这里不再赘述（可以单独开个专题0.0）</p><h3 id="2-EventExecutorGroup"><a href="#2-EventExecutorGroup" class="headerlink" title="2.EventExecutorGroup"></a>2.EventExecutorGroup</h3><p>接口，Netty自定义的一个线程池，负责复用EventExecutor和执行任务</p><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210810161156200-577630208.png"></p><h3 id="3-EventLoopGroup"><a href="#3-EventLoopGroup" class="headerlink" title="3.EventLoopGroup"></a>3.EventLoopGroup</h3><p>核心接口，EventLoopGroup继承自EventExecutorGroup，代表他是一个线程池。同时他具备将channel注册到EventExecutorGroup的功能，代表他是一个能够真正处理Channel的特殊线程池</p><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210810161126765-393951390.png"></p><h3 id="4-MultithreadEventExecutorGroup（AbstractEventExecutorGroup）"><a href="#4-MultithreadEventExecutorGroup（AbstractEventExecutorGroup）" class="headerlink" title="4.MultithreadEventExecutorGroup（AbstractEventExecutorGroup）"></a>4.MultithreadEventExecutorGroup（AbstractEventExecutorGroup）</h3><p>抽象类，实现自EventExecutorGroup接口，提供了一个简易线程池的实现，其只有一个抽象方法newChild（创建EventExecutor）供子类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">MultithreadEventExecutorGroup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nThreads, Executor executor, EventExecutorChooserFactory chooserFactory, Object... args)</span></span><br></code></pre></td></tr></table></figure><h4 id="4-1-nThreads"><a href="#4-1-nThreads" class="headerlink" title="4.1 nThreads"></a><strong>4.1 nThreads</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> EventExecutor[] children;<br></code></pre></td></tr></table></figure><p>该线程池通过数组存储线程，入参nThreads指定数组大小，并循环调用newChild创建线程。当创建过程中有异常时，会自动调用已创建完成线程的shutdownGracefully方法，进行优雅关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nThreads; i ++) &#123;<br>    <span class="hljs-keyword">boolean</span> success = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        children[i] = newChild(executor, args);<br>        success = <span class="hljs-keyword">true</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Think about if this is a good exception type</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;failed to create a child event loop&quot;</span>, e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (!success) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j ++) &#123;<br>                children[j].shutdownGracefully();<br>            &#125;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j ++) &#123;<br>                EventExecutor e = children[j];<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">while</span> (!e.isTerminated()) &#123;<br>                        e.awaitTermination(Integer.MAX_VALUE, TimeUnit.SECONDS);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException interrupted) &#123;<br>                    <span class="hljs-comment">// Let the caller handle the interruption.</span><br>                    Thread.currentThread().interrupt();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-EventExecutorChooserFactory"><a href="#4-2-EventExecutorChooserFactory" class="headerlink" title="4.2 EventExecutorChooserFactory"></a><strong>4.2 EventExecutorChooserFactory</strong></h4><p>EventExecutorChooserFactory是一个工厂接口，负责创建EventExecutorChooser</p><p>其默认实现DefaultEventExecutorChooserFactory会判断当前线程数是否2的n次幂，如果是则返回PowerOfTwoEventExecutorChooser，否则返回GenericEventExecutorChooser</p><h4 id="4-3-EventExecutorChooser"><a href="#4-3-EventExecutorChooser" class="headerlink" title="4.3 EventExecutorChooser"></a><strong>4.3 EventExecutorChooser</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> EventExecutorChooserFactory.EventExecutorChooser chooser;<br></code></pre></td></tr></table></figure><p>EventExecutorChooser负责根据一定规则从线程池children数组中取得下一个线程</p><p>PowerOfTwoEventExecutorChooser：通过&amp;运算，将超出executors.length的位置为0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> EventExecutor <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> executors[idx.getAndIncrement() &amp; executors.length - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>GenericEventExecutorChooser：通过求余运算，获取有效index</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> EventExecutor <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> executors[Math.abs(idx.getAndIncrement() % executors.length)];<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出当线程数是2的n次幂时，Netty通过与运算优化了效率</p><h3 id="5-MultithreadEventLoopGroup"><a href="#5-MultithreadEventLoopGroup" class="headerlink" title="5.MultithreadEventLoopGroup"></a>5.MultithreadEventLoopGroup</h3><p>抽象类，继承自MultithreadEventExecutorGroup并实现了EventLoopGroup接口，代表此抽象类是一个可以注册并处理channel的线程池</p><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210810171809022-1946064477.png"></p><p>值得关注的是next方法，他把返回值的类型，进一步限定为EventLoop</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> EventLoop <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (EventLoop) <span class="hljs-keyword">super</span>.next();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-DefaultEventLoopGroup"><a href="#6-DefaultEventLoopGroup" class="headerlink" title="6.DefaultEventLoopGroup"></a>6.DefaultEventLoopGroup</h3><p>MultithreadEventLoopGroup的一个默认实现</p><p>其核心就是实现了newChild方法返回一个EventLoop extends EventExecutor实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> EventLoop <span class="hljs-title">newChild</span><span class="hljs-params">(Executor executor, Object... args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultEventLoop(<span class="hljs-keyword">this</span>, executor);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h3><p>说白了EventLoopGroup核心方法，register负责将channel与线程池中某一线程绑定，next负责返回下一个线程供调用方执行任务</p><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210810144640266-409878451.png"></p><h2 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h2><p>EventLoop直译为事件循环，他的职责简单来说就是绑定一个唯一的线程，去执行或调度被分配的任务。</p><p>可见一个EventLoop实例可以为多个channel服务，而为了最大化利用资源，Netty使用池化技术将EventLoop放入EventLoopGroup中管理。</p><p>EventLoop的具体实现有很多，先看下DefaultEventLoop的类图，会发现他和DefaultEventLoopGroup的类图很像，都继承了EventLoopGroup接口，但其最大的不同是红框所示，他还继承了EventExecutor，下面主要讲一下多出来的这部分到底是干了什么</p><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210810173443968-945079597.png"></p><h3 id="1-EventExecutor"><a href="#1-EventExecutor" class="headerlink" title="1.EventExecutor"></a>1.EventExecutor</h3><p>接口，定义了一个事件执行器，主要方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 直接返回自身</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function">EventExecutor <span class="hljs-title">next</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回所属线程池</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">EventExecutorGroup <span class="hljs-title">parent</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断当前线程是否是当前EventLoop绑定的线程</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">inEventLoop</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断传入线程是否是当前EventLoop绑定的线程</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">inEventLoop</span><span class="hljs-params">(Thread thread)</span></span>;<br></code></pre></td></tr></table></figure><p> （还涉及一些Future异步编程的一些东西，太复杂了后续再填坑吧0.0）</p><h3 id="2-AbstractScheduledEventExecutor-（AbstractEventExecutor）"><a href="#2-AbstractScheduledEventExecutor-（AbstractEventExecutor）" class="headerlink" title="2.AbstractScheduledEventExecutor （AbstractEventExecutor）"></a>2.AbstractScheduledEventExecutor （AbstractEventExecutor）</h3><p>抽象类，简单定义了一个支持延迟（定时）任务的执行器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">//延时队列</span><br>   PriorityQueue&lt;ScheduledFutureTask&lt;?&gt;&gt; scheduledTaskQueue;<br><span class="hljs-comment">//下一个任务id</span><br>   <span class="hljs-keyword">long</span> nextTaskId;<br></code></pre></td></tr></table></figure><p> 重要方法scheduled</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> &lt;V&gt; <span class="hljs-function">ScheduledFuture&lt;V&gt; <span class="hljs-title">schedule</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ScheduledFutureTask&lt;V&gt; task)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (inEventLoop()) &#123;<br>    <span class="hljs-comment">//如果和执行器绑定的线程一致，直接放入延时队列中</span><br>        scheduleFromEventLoop(task);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">//获取任务最晚执行时间</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> deadlineNanos = task.deadlineNanos();<br>        <span class="hljs-comment">// task will add itself to scheduled task queue when run if not expired</span><br>        <span class="hljs-keyword">if</span> (beforeScheduledTaskSubmitted(deadlineNanos)) &#123;<br>        <span class="hljs-comment">//放入线程池执行</span><br>            execute(task);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//与execute类似，但不保证任务会在执行非延迟任务或执行程序关闭之前运行，默认实现只是委托给execute(Runnable) </span><br>            lazyExecute(task);<br>            <span class="hljs-comment">// Second hook after scheduling to facilitate race-avoidance</span><br>            <span class="hljs-keyword">if</span> (afterScheduledTaskSubmitted(deadlineNanos)) &#123;<br>                execute(WAKEUP_TASK);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> task;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-SingleThreadEventExecutor"><a href="#3-SingleThreadEventExecutor" class="headerlink" title="3.SingleThreadEventExecutor"></a>3.SingleThreadEventExecutor</h3><p>抽象类，定义了一个单线程顺序执行器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(Runnable task, <span class="hljs-keyword">boolean</span> immediate)</span> </span>&#123;<br>      <span class="hljs-keyword">boolean</span> inEventLoop = inEventLoop();<br>      <span class="hljs-comment">//添加到任务队列</span><br>      addTask(task);<br>      <span class="hljs-keyword">if</span> (!inEventLoop) &#123;<br>      <span class="hljs-comment">//启动线程</span><br>          startThread();<br>          <span class="hljs-comment">//如果线程池已经关闭，调用拒绝方法</span><br>          <span class="hljs-keyword">if</span> (isShutdown()) &#123;<br>              <span class="hljs-keyword">boolean</span> reject = <span class="hljs-keyword">false</span>;<br>              <span class="hljs-keyword">try</span> &#123;<br>                  <span class="hljs-keyword">if</span> (removeTask(task)) &#123;<br>                      reject = <span class="hljs-keyword">true</span>;<br>                  &#125;<br>              &#125; <span class="hljs-keyword">catch</span> (UnsupportedOperationException e) &#123;<br>                  <span class="hljs-comment">// The task queue does not support removal so the best thing we can do is to just move on and</span><br>                  <span class="hljs-comment">// hope we will be able to pick-up the task before its completely terminated.</span><br>                  <span class="hljs-comment">// In worst case we will log on termination.</span><br>              &#125;<br>              <span class="hljs-keyword">if</span> (reject) &#123;<br>                  reject();<br>              &#125;<br>          &#125;<br>      &#125;<br><span class="hljs-comment">//唤醒线程</span><br>      <span class="hljs-keyword">if</span> (!addTaskWakesUp &amp;&amp; immediate) &#123;<br>          wakeup(inEventLoop);<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="4-SingleThreadEventLoop"><a href="#4-SingleThreadEventLoop" class="headerlink" title="4.SingleThreadEventLoop"></a>4.SingleThreadEventLoop</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleThreadEventLoop</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SingleThreadEventExecutor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">EventLoop</span> </span><br></code></pre></td></tr></table></figure><p> EventLoop的抽象基类，负责在单线程中执行所有被提交的任务，同时具有注册和处理channle的能力</p><h3 id="5-DefaultEventLoop"><a href="#5-DefaultEventLoop" class="headerlink" title="5.DefaultEventLoop"></a>5.DefaultEventLoop</h3><p>单线程任务执行器的默认实现，主要就是其实现的run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//循环阻塞的获取任务，知道被通知关闭</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        Runnable task = takeTask();<br>        <span class="hljs-keyword">if</span> (task != <span class="hljs-keyword">null</span>) &#123;<br>            task.run();<br>            updateLastExecutionTime();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (confirmShutdown()) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h3><p>通过以上分析，不难看出Netty首先定义了自己的线程池（EventExectorGroup）和执行器（EventExector），然后通过继承的方式定义了线程池（EventLoopGroup）和执行器（EventLoop），从而添加了处理（注册）channel的能力。</p><blockquote><p>You gotta grab what you can when you can.<br>机不可失，时不我待。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Netty</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Netty</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty入门（二）：Channel</title>
    <link href="/2021/09/01/Netty%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AChannel/"/>
    <url>/2021/09/01/Netty%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AChannel/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Netty系列索引：</p><p><a href="https://www.cnblogs.com/hystrix/p/15103649.html">1.Netty入门（一）：ByteBuf</a></p><p><a href="https://www.cnblogs.com/hystrix/p/15105300.html">2.Netty入门（二）：Channel</a></p></blockquote><p>在Netty框架中，Channel是其中之一的核心概念，是Netty网络通信的主体，由它负责同对端进行网络通信、注册和数据操作等功能。本文我们来详细地分析 Netty 中的 Channel以及跟Channel相关的其他概念，包括ChannelPipeline、ChannelHandlerContext、ChannelHandler等</p><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210805200421066-1000635923.png"></p><p>上图简述了数据被读取后的处理流程，可以看出channel通过pipeline链接了多个Handler并依次执行，类似职责链模式。</p><h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><p>目前可以把 Channel 看作是传入（入站）或者传出（出站）数据的通道，它可以被打开或者被关闭，连接或者断开连接。</p><p>Netty对JDK原生的ServerSocketChannel进行了封装和增强, 相对于原生的JdkChannel, Netty的Channel增加了如下的组件</p><ul><li>id 标识唯一身份信息</li><li>可能存在的parent Channel</li><li>管道 pepiline，用于链接handler</li><li>用于数据读写的unsafe内部类，实际IO操作都是该类实现的</li><li>关联唯一的EventLoop，EventGroup-&gt;EventLoop-&gt;Channel（后续章节再讲，其实就是类似线程池的东西）</li></ul><p><strong>channel生命周期</strong></p><table><thead><tr><th>ChannelUnregistered</th><th>Channel 已经被创建，但还未注册到 EventLoop</th></tr></thead><tbody><tr><td>ChannelRegistered</td><td>已经被注册到了 EventLoop</td></tr><tr><td>ChannelActive</td><td>处于活动状态（已经连接到它的远程节点）。它现在可以接收和发送数据了</td></tr><tr><td>ChannelInactive</td><td>没有连接到远程节点</td></tr></tbody></table><h2 id="ChannelPipeline"><a href="#ChannelPipeline" class="headerlink" title="ChannelPipeline"></a>ChannelPipeline</h2><p>ChannelPipeline是ChannelHandler实例对象的链表，用于处理或截获通道的接收和发送数据。它提供了一种高级的截取过滤模式（类似serverlet中的filter功能），让用户可以在ChannelPipeline中完全控制一个事件以及如何处理ChannelHandler与ChannelPipeline的交互。</p><p>每个Channel，都会创建一个唯一的ChannelPipeline</p><p>ChannelPipeline 可以根据需要，通过添加或者删除 ChannelHandler 来动态地修改（典型应用，动态修改协议等）</p><p>ChannelPipeline 有着丰富的 API 用以被调用，以响应入站和出站事件。</p><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210806175651006-647710987.png"></p><h2 id="ChannelHandlerContext"><a href="#ChannelHandlerContext" class="headerlink" title="ChannelHandlerContext"></a>ChannelHandlerContext</h2><p>ChannelHandlerContext类似上下文的概念，代表了 ChannelHandler 和 ChannelPipeline 之间的关联，每当有 ChannelHandler 添加到 ChannelPipeline 中时，都会创建 ChannelHandlerContext。</p><p>ChannelHandlerContext 的主要功能是管理它所关联的 ChannelHandler 和在同一个 ChannelPipeline 中的其他 ChannelHandler 之间的交互。</p><p>核心功能：</p><ul><li>ChannelHandlerContext使得ChannelHandler能够和它的ChannelPipeline以及其他的ChannelHandler 交互。</li><li>ChannelHandler 可以通知其所属的 ChannelPipeline 中的下一个ChannelHandler</li><li>ChannelHandlerContext 具有丰富的用于处理事件和执行 I/O 操作的 API</li></ul><h2 id="ChannelHandler"><a href="#ChannelHandler" class="headerlink" title="ChannelHandler"></a>ChannelHandler</h2><p><strong>生命周期：</strong></p><table><thead><tr><th>handlerAdded</th><th>当把 ChannelHandler 添加到 ChannelPipeline 中时被调用</th></tr></thead><tbody><tr><td>handlerRemoved</td><td>当从 ChannelPipeline 中移除 ChannelHandler 时被调用</td></tr><tr><td>exceptionCaught</td><td>当处理过程中在 ChannelPipeline 中有错误产生时被调用</td></tr></tbody></table><p><strong>ChannelInboundHandler 的方法</strong></p><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210805194621958-575128719.png"></p><p><strong>ChannelOutboundHandler 的方法</strong></p><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210805194638783-1444220217.png"></p><p><strong>内存泄漏监控</strong></p><p>在使用handler处理ByteBuf时，应正确处理其被引用次数，尤其是调用read和write后，应正确释放其引用。</p><p>（注意：SimpleChannelInboundHandler会自动释放引用）</p><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210805194811750-721310210.png"></p>]]></content>
    
    
    <categories>
      
      <category>Netty</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Netty</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty入门（一）：ByteBuf</title>
    <link href="/2021/08/31/Netty%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AByteBuf/"/>
    <url>/2021/08/31/Netty%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AByteBuf/</url>
    
    <content type="html"><![CDATA[<blockquote><p>​    网络数据的基本单位总是字节。Java NIO 提供了 ByteBuffer 作为它的字节容器，但是这个类使用起来过于复杂，而且也有些繁琐。Netty 的 ByteBuffer 替代品是 ByteBuf，一个强大的实现，既解决了 JDK API 的局限性，又为网络应用程序的开发者提供了更好的 API</p><p>Netty系列索引：</p><p><a href="https://www.cnblogs.com/hystrix/p/15103649.html">1.Netty入门（一）：ByteBuf</a></p><p><a href="https://www.cnblogs.com/hystrix/p/15105300.html">2.Netty入门（二）：Channel</a></p></blockquote><h2 id="ByteBuf优势"><a href="#ByteBuf优势" class="headerlink" title="ByteBuf优势"></a>ByteBuf优势</h2><ul><li>它可以被用户自定义的缓冲区类型扩展</li><li>通过内置的复合缓冲区类型实现了透明的零拷贝</li><li>容量可以按需增长</li><li>在读和写这两种模式之间切换不需要调用 ByteBuffer 的 flip()方法</li><li>读和写使用了不同的索引</li><li>支持方法的链式调用</li><li>支持引用计数</li><li>支持池化</li></ul><h2 id="ByteBuf实现原理"><a href="#ByteBuf实现原理" class="headerlink" title="ByteBuf实现原理"></a>ByteBuf实现原理</h2><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210805151519851-1187851347.png" alt="img"></p><p>如图ByteBuf通维护了两个不同的索引：一个用于读取，一个用于写入。</p><p>当你从 ByteBuf 读取时，它的 readerIndex 将会被递增已经被读取的字节数。同样地，当你写入 ByteBuf 时，它的writerIndex 也会被递增</p><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210805150315046-922530702.png" alt="img"></p><p>当调用readBytes时，readIndex会相应移动length位，如果readIndex移动后大于writeIndex则会抛异常。</p><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210805150840601-1389027729.png" alt="img"></p><p>当调用writeBytes时，writeIndex会相应移动length位，且通过ensureWritable方法实现自动扩容</p><h4 id="其他常用API"><a href="#其他常用API" class="headerlink" title="其他常用API"></a>其他常用API</h4><table><thead><tr><th>getBytes</th><th>获取可读字节数组</th></tr></thead><tbody><tr><td>setBytes</td><td>写入字节</td></tr><tr><td>discardReadBytes</td><td>废弃已读字节</td></tr><tr><td>mark</td><td>标记index</td></tr><tr><td>reset</td><td>将index重置到之前标记的位置（配合mark使用）</td></tr><tr><td>isReadable</td><td>如果至少有一个字节可供读取，则返回 true</td></tr><tr><td>isWritable</td><td>如果至少有一个字节可被写入，则返回 true</td></tr><tr><td>readableBytes</td><td>返回可被读取的字节数</td></tr><tr><td>writableBytes</td><td>返回可被写入的字节数</td></tr><tr><td>capacity</td><td>返回 ByteBuf 可容纳的字节数。在此之后，它会尝试再次扩展直到达到 maxCapacity()</td></tr><tr><td>maxCapacity</td><td>返回 ByteBuf 可以容纳的最大字节数</td></tr><tr><td>hasArray</td><td>如果 ByteBuf 由一个字节数组支撑，则返回 true</td></tr><tr><td>array</td><td>如果 ByteBuf 由一个字节数组支撑则返回该数组；否则，它将抛出一个UnsupportedOperationException 异常</td></tr></tbody></table><h2 id="ByteBuf缓冲分类"><a href="#ByteBuf缓冲分类" class="headerlink" title="ByteBuf缓冲分类"></a><strong>ByteBuf缓冲分类</strong></h2><p><strong>1、Heap buffer(堆缓冲区)：</strong></p><p>就是将数据存在JVM堆空间中，在没有被池化的情况可以快速分配和释放。</p><p>优点：由于数据是存储在JVM堆中，因此可以快速的创建与快速的释放，并且它提供了直接访问内部字节数组的方法。</p><p>缺点：每次读写数据时，都需要先将数据复制到直接缓冲区中再进行网路传输。</p><p><strong>2、Direct buffer(直接缓冲区)：</strong></p><p>直接缓冲区，在堆外直接分配内存空间，直接缓冲区并不会占用堆的容量空间，因为它是由操作系统在本地内存进行的数据分配。</p><p>优点：在使用Socket进行数据传递时，性能非常好，因为数据直接位于操作系统的本地内存中，所以不需要从JVM将数据复制到直接缓冲区中 。</p><p>缺点：因为Direct Buffer是直接在操作系统内存中的，所以内存空间的分配与释放要比堆空间更加复杂，而且速度要慢一些。</p><p>注意：</p><p>如果你的数据包含在一个在堆上的分配的缓冲区中，那么事实上，在通过套接字发送他之前，jvm将会在内部把你的缓冲区复制到一个直接缓冲区中；这样分配释放就比较浪费资源；</p><p>建议：</p><p>直接缓冲区并不支持通过字节数组的方式来访问数据。对于后端业务的消息编解码来说，推荐使用HeapByteBuf；对于I/O通信线程在读写缓冲区时，推荐使用DirectByteBuf；</p><p><strong>3、Composite Buffer 复合缓冲区:</strong></p><p>可以拥有以上两种的缓冲区，通过一种聚合视图来操作底层持有的多种类型Buffer。这种缓冲，jdk nio是没有这种特性的。</p><h2 id="ByteBuf主要实现类"><a href="#ByteBuf主要实现类" class="headerlink" title="ByteBuf主要实现类"></a><strong>ByteBuf主要</strong>实现类</h2><p>pooled：池化，重用ByteBuf对象</p><p>Direct：直接内存，内部通过ByteBuffer实现，典型装饰模式</p><p>Heap：堆内存，内部持有byte数组</p><p><strong>（1）UnpooledDirectByteBuf：</strong></p><p>在堆外进行内存分配的非内存池ByteBuf，内部持有ByteBuffer对象，相关操作委托给ByteBuffer实现。</p><p><strong>（2）UnpooledHeapByteBuf：</strong></p><p>基于堆内存分配非内存池ByteBuf，即内部持有byte数组。</p><p><strong>（3）UnpooledUnsafeDirectByteBuf：</strong></p><p>和另外一个类UnpooledDirectByteBuf差不多相同，区别在于UnpooledUnsafeDirectByteBuf内部使用基于PlatformDependent相关操作实现ByteBuf，依赖平台。</p><p><strong>（4）ReadOnlyByteBufferBuf：</strong></p><p>只读ByteBuf，内部持有ByteBuffer对象，相关操作委托给ByteBuffer实现，该ByteBuf限内部使用；</p><p><strong>（5）FixedCompositeByteBuf：</strong></p><p>用于将多个ByteBuf组合在一起，形成一个虚拟的只读ByteBuf对象，不允许写入和动态扩展。内部使用Object[]将多个ByteBuf组合在一起，一旦FixedCompositeByteBuf对象构建完成，则不会被更改。</p><p><strong>（6）CompositeByteBuf：</strong></p><p>用于将多个ByteBuf组合在一起，形成一个虚拟的ByteBuf对象，支持读写和动态扩展。内部使用List组合多个ByteBuf。一般使用使用ByteBufAllocator的compositeBuffer()方法，Unpooled的工厂方法compositeBuffer()或wrappedBuffer(ByteBuf… buffers)创建CompositeByteBuf对象。</p><p><strong>（7）PooledByteBuf：</strong></p><p>基于内存池的ByteBuf，主要为了重用ByteBuf对象，提升内存的使用效率；适用于高负载，高并发的应用中。主要有PooledDirectByteBuf，PooledHeapByteBuf，PooledUnsafeDirectByteBuf三个子类，PooledDirectByteBuf是在堆外进行内存分配的内存池ByteBuf，PooledHeapByteBuf是基于堆内存分配内存池ByteBuf，PooledUnsafeDirectByteBuf也是在堆外进行内存分配的内存池ByteBuf，区别在于PooledUnsafeDirectByteBuf内部使用基于PlatformDependent相关操作实现ByteBuf，具有平台相关性。</p><h2 id="ByteBufHolder"><a href="#ByteBufHolder" class="headerlink" title="ByteBufHolder"></a>ByteBufHolder</h2><p>利用组合的方式对ByteBuf进行扩展。实际应用中我们经常发现，除了实际的数据负载之外，我们还需要存储各种属性值。HTTP 响应便是一个很好的例子，除了表示为字节的内容，还包括状态码、cookie 等。为了处理这种常见的用例，Netty 提供了 ByteBufHolder。ByteBufHolder 也为 Netty 的高级特性提供了支持，如缓冲区池化，其中可以从池中借用 ByteBuf，并且在需要时自动释放。</p><h2 id="ByteBufAllocator"><a href="#ByteBufAllocator" class="headerlink" title="ByteBufAllocator"></a>ByteBufAllocator</h2><p>为了降低分配和释放内存的开销，Netty 通过 ByteBufAllocator 实现了（ByteBuf 的）池化，它可以用来分配我们所描述过的任意类型的 ByteBuf 实例。Netty提供了两种ByteBufAllocator的实现：PooledByteBufAllocator和UnpooledByteBufAllocator。前者池化了ByteBuf的实例以提高性能并最大限度地减少内存碎片。</p><p><img src="https://img2020.cnblogs.com/blog/1775845/202108/1775845-20210805162035739-1058907462.png" alt="img"></p><h2 id="ReferenceCounted"><a href="#ReferenceCounted" class="headerlink" title="ReferenceCounted"></a>ReferenceCounted</h2><p>类似GC引用计数法，Netty中ByteBuf和ByteBufHolder都实现了该接口，其主要通过方法retain(release)来增加(减少)资源被引用的次数，当引用为0时，代表该资源可以被释放。</p>]]></content>
    
    
    <categories>
      
      <category>Netty</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Netty</tag>
      
      <tag>Java</tag>
      
      <tag>NIO</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
